"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[820],{4622:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0948033f",path:"/Back-end/python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html",title:"python基础学习",lang:"zh-CN",frontmatter:{date:"2021/12/12",categories:["后端"],tag:["Python基础"]},excerpt:"",headers:[{level:2,title:"python基础",slug:"python基础",children:[{level:3,title:"数据类型和变量",slug:"数据类型和变量",children:[]},{level:3,title:"使用list和tuple",slug:"使用list和tuple",children:[]},{level:3,title:"条件判断",slug:"条件判断",children:[]},{level:3,title:"循环",slug:"循环",children:[]},{level:3,title:"使用dict和set",slug:"使用dict和set",children:[]}]},{level:2,title:"函数",slug:"函数",children:[{level:3,title:"调用函数",slug:"调用函数",children:[]},{level:3,title:"定义函数",slug:"定义函数",children:[]},{level:3,title:"函数的参数",slug:"函数的参数",children:[]}]}],filePathRelative:"Back-end/python基础学习.md",git:{updatedTime:1645373715e3,contributors:[{name:"luck_baby",email:"67427627+ranyong1997@users.noreply.github.com",commits:3}]}}},4879:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="python基础学习" tabindex="-1"><a class="header-anchor" href="#python基础学习" aria-hidden="true">#</a> python基础学习</h1><h2 id="python基础" tabindex="-1"><a class="header-anchor" href="#python基础" aria-hidden="true">#</a> python基础</h2><h3 id="数据类型和变量" tabindex="-1"><a class="header-anchor" href="#数据类型和变量" aria-hidden="true">#</a> 数据类型和变量</h3><ul><li>整数</li></ul><p>python可以处理任意大小的整数，包括负整数，在程序中的表示方式和数学上的写法一摸一样<code>100</code>，<code>-8080</code>，<code>0</code>等等</p><ul><li>浮点数</li></ul><p>浮点数也是小数，如<code>1.23</code>,<code>3.14</code>，<code>-9.01</code>等等</p><ul><li>字符串</li></ul><p>字符串是以单引号<code>&#39;</code>或者<code>&quot;</code>括起来的任意文本，比如<code>abc</code>，<code>xyz</code>等等</p><ul><li>布尔值</li></ul><p>布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code></p><ul><li>空值</li></ul><p>空值是python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能等于<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值</p><ul><li>常量</li></ul><p>所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。</p><h3 id="使用list和tuple" tabindex="-1"><a class="header-anchor" href="#使用list和tuple" aria-hidden="true">#</a> 使用list和tuple</h3><ul><li>list</li></ul><blockquote><p>python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码中，变量<code>classmates</code>就是一个liest。用<code>len()</code>函数可以获取list元素的个数：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>用索引来访问list中每一个位置的元素，记得索引是从<code>0</code>开始的</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># Michael</span>\n<span class="token comment"># Bob</span>\n<span class="token comment"># Tracy</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果要取最后一个元素，除了计算索引位置外，还可以用<code>-1</code>做索引，直接获取最后一个元素:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment"># Tracy</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\nclassmates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;, &#39;Adam&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>也可以把元素插入到指定的位置，比如索引号为<code>1</code>的位置：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\nclassmates<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;jack&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;jack&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>要删除list末尾的元素，用<code>pop()</code>方法：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\nclassmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;Bob&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>要删除指定的元素，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\nclassmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;Tracy&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\nclassmates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Sarah&quot;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span>\n\n<span class="token comment"># [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>list里面的元素的数据类型也可以不同，比如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>list元素也可以是另一个list，比如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;asp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;php&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;scheme&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>tuple</li></ul><blockquote><p>另一种有序列表叫元祖：tuple。tuple和list非常相似。但是tuple一旦初始化就不能修改</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>classmates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在，classmates这个tuple不能变了，它也没有了append()，insert()这样的方法。其中获取元素的方法和list是一样的，你可以正常使用<code>classmates[0]</code>，<code>classmates[-1]</code>,但不能赋值成另外的元素。</p><p>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</p><p>tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被定下来</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n\n<span class="token comment"># (1, 2)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果要定义一个空的tuple，可以写成<code>()</code>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>\n\n<span class="token comment"># （）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h3><p>语法：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token operator">&gt;</span>：\n\t\t<span class="token operator">&lt;</span>执行<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用<code>if</code>语句实现：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;your age is&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;adult&#39;</span><span class="token punctuation">)</span>\n    \n<span class="token comment"># your age is 20</span>\n<span class="token comment"># adult    </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>根据Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行print语句执行了，否则，什么也不做。</p><p>也可以给<code>if</code>添加一个<code>else</code>语句，意思是，如果<code>if</code>判断是<code>False</code>，不要执行<code>if</code>的内容，去把<code>else</code>执行了：</p><p>语法：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token operator">&gt;</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;your age is&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;adult&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;your age is&#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;teenager&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># your age is 3</span>\n<span class="token comment"># teenager</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>elif</code>是<code>else if</code>的缩写，完全可以有多个<code>elif</code>，所以<code>if</code>语句的完整形式就是：</p><p>语法：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span>\n<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span>\n<span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>，所以，请测试并解释为什么下面的程序打印的是<code>teenager</code>：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">6</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;teenager&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">elif</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;adult&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;kid&#39;</span><span class="token punctuation">)</span>\n    \n<span class="token comment"># teenager</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h3><blockquote><p>Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n    \n<span class="token comment"># Michael</span>\n<span class="token comment"># Bob</span>\n<span class="token comment"># Tracy</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>所以<code>for x in ...</code>循环就是把每个元素代入变量<code>x</code>，然后执行缩进块的语句。</p><p>再比如我们想计算1-10的整数之和，可以用一个<code>sum</code>变量做累加：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> x\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 55</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>break</li></ul><p>在循环中，<code>break</code>语句可以提前退出循环。例如，本来要循环打印1～100的数字：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">while</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的代码可以打印出1～100。</p><p>如果要提前结束循环，可以使用break语句：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">while</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>\n        <span class="token keyword">break</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行上面的代码可以看到，打印出1~10后，紧接着打印<code>END</code>，程序结束。</p><p>可见<code>break</code>的作用是提前结束循环。</p><ul><li>continue</li></ul><blockquote><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用<code>continue</code>语句跳过某些循环：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>\n    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 如果n是偶数，执行continue语句</span>\n        <span class="token keyword">continue</span> <span class="token comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。</p><p>可见<code>continue</code>的作用是提前结束本轮循环，并直接开始下一轮循环。</p><h3 id="使用dict和set" tabindex="-1"><a class="header-anchor" href="#使用dict和set" aria-hidden="true">#</a> 使用dict和set</h3><ul><li>dict</li></ul><blockquote><p>python内置了字典：dict的支持，使用键-值（key-value）存储，具有极快的查找速度。</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">&quot;Michael&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 95</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>要删除一个key，用pop(key)方法，对应的value也会从dict删除：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">:</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token string">&#39;Tracy&#39;</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span>\n\nd<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>\n\n<span class="token comment"># {&#39;Michael&#39;: 95, &#39;Tracy&#39;: 85}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol></div><ul><li>set</li></ul><blockquote><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><p>要创建一个set，需要提供一个list作为输入集合：</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\n<span class="token comment"># {1, 2, 3}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意，传入的参数<code>[1, 2, 3]</code>是一个list，而显示的<code>{1, 2, 3}</code>只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的</p><p>重复元素在set中自动被过滤</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\n<span class="token comment"># {1, 2, 3, 4}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\ns<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\n<span class="token comment"># {1, 2, 3, 4}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过<code>remove(key)</code>方法可以删除元素：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\ns<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n\n<span class="token comment"># {1, 2, 3}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数" aria-hidden="true">#</a> 调用函数</h3><blockquote><p>Python内置了很多有用的函数，我们可以直接调用。</p></blockquote><p>调用<code>ads</code>函数</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token number">100</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>\n<span class="token number">20</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span>\n<span class="token number">12.34</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>调用<code>max</code>函数<code>max()</code>可以接受任意多个参数，并返回最大的那个：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token number">2</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h4><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>\n<span class="token number">123</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span>\n<span class="token number">12</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;12.34&#39;</span><span class="token punctuation">)</span>\n<span class="token number">12.34</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span>\n<span class="token string">&#39;1.23&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token string">&#39;100&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token boolean">True</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token boolean">False</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个&quot;别名&quot;</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token builtin">abs</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="定义函数" tabindex="-1"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h3><blockquote><p>在python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>;然后，在缩进快中编译函数体，函数的返回值用<code>return</code>语句返回。</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x\n  <span class="token keyword">else</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> <span class="token operator">-</span>x\n  \n<span class="token keyword">print</span><span class="token punctuation">(</span>my_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 99</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="空函数" tabindex="-1"><a class="header-anchor" href="#空函数" aria-hidden="true">#</a> 空函数</h4><blockquote><p>如果想定义一个什么事都不做的空函数，可以用<code>pass</code>语句:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">nop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token keyword">pass</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>pass</code>语句什么都不做，它的作用实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>,让代码先运行起来。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>\n  <span class="token keyword">pass</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>缺少了<code>pass</code>,代码运行就会有语法错误。</p><h3 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数" aria-hidden="true">#</a> 函数的参数</h3><blockquote><p>定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。</p></blockquote><h4 id="位置参数" tabindex="-1"><a class="header-anchor" href="#位置参数" aria-hidden="true">#</a> 位置参数</h4><blockquote><p>我们先写一个计算x2的函数</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  \t<span class="token keyword">return</span> x <span class="token operator">*</span> x\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数。</p><p>当我们调用<code>power</code>函数时，必须传入有且仅有一个参数<code>x</code>：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n  <span class="token comment"># 25 </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在，如果我们要计算x3怎么办？可以再定义一个<code>power3</code>函数，但是如果要计算x4、x5……怎么办？我们不可能定义无限多个函数。</p><p>你也许想到了，可以把<code>power(x)</code>修改为<code>power(x, n)</code>，用来计算xn，说干就干：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    s <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>\n        s <span class="token operator">=</span> s <span class="token operator">*</span> x\n    <span class="token keyword">return</span> s\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>对于这个修改后的power(x,n)函数，可以计算任意n次方：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token comment"># 25</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改后的<code>power(x,n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code></p><h4 id="默认参数" tabindex="-1"><a class="header-anchor" href="#默认参数" aria-hidden="true">#</a> 默认参数</h4><blockquote><p>新的power(x,n)函数定义没有问题，但是，旧的调用代码失效了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\nTypeError<span class="token punctuation">:</span> power<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">&#39;n&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>python的错误信息很明确：调用函数<code>power()</code>缺少了一个位置参数<code>n</code>。</p><p>这个时候，默认参数就派上用场了，由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    s <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>\n        s <span class="token operator">=</span> s <span class="token operator">*</span> x\n    <span class="token keyword">return</span> s\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样，当我们调用<code>power(5)</code>时，相当于调用<code>power(5,2)</code>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token comment"># 25</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',147),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);