"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[726],{6423:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-8171ecea",path:"/Back-end/Python%E8%BF%9B%E9%98%B6.html",title:"Python进阶",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Pyhon的函数参数传递",slug:"pyhon的函数参数传递",children:[]},{level:2,title:"@staticmethod和@classmethod",slug:"staticmethod和-classmethod",children:[]},{level:2,title:"类变量和实例变量",slug:"类变量和实例变量",children:[]},{level:2,title:"Python自省",slug:"python自省",children:[]},{level:2,title:"字典推倒式",slug:"字典推倒式",children:[]},{level:2,title:"Python中单下划线和双下划线",slug:"python中单下划线和双下划线",children:[]},{level:2,title:"字符串格式化：%和.format",slug:"字符串格式化-和-format",children:[]},{level:2,title:"迭代器和生成器",slug:"迭代器和生成器",children:[]},{level:2,title:"*args and **kwargs",slug:"args-and-kwargs",children:[]},{level:2,title:"Python中重载",slug:"python中重载",children:[]},{level:2,title:"__new__和__init__的区别",slug:"new-和-init-的区别",children:[]},{level:2,title:"单例子模式",slug:"单例子模式",children:[]},{level:2,title:"Python中的做用域",slug:"python中的做用域",children:[]},{level:2,title:"GIL线程的全局锁",slug:"gil线程的全局锁",children:[]},{level:2,title:"协程",slug:"协程",children:[]},{level:2,title:"闭包",slug:"闭包",children:[]},{level:2,title:"Python里的拷贝",slug:"python里的拷贝",children:[]},{level:2,title:"Python垃圾回收机制",slug:"python垃圾回收机制",children:[]},{level:2,title:"Python中list的实现",slug:"python中list的实现",children:[]},{level:2,title:"Python的is",slug:"python的is",children:[]},{level:2,title:"read，readline和readlines",slug:"read-readline和readlines",children:[]}],filePathRelative:"Back-end/Python进阶.md",git:{updatedTime:null,contributors:[]}}},277:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="python进阶" tabindex="-1"><a class="header-anchor" href="#python进阶" aria-hidden="true">#</a> Python进阶</h1><h2 id="pyhon的函数参数传递" tabindex="-1"><a class="header-anchor" href="#pyhon的函数参数传递" aria-hidden="true">#</a> Pyhon的函数参数传递</h2><p>先看两个例子：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  \ta <span class="token operator">=</span> <span class="token number">2</span>\nfun<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token keyword">print</span> a <span class="token comment"># 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>\n  \ta<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\nfun<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token keyword">print</span> a <span class="token comment"># 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所有的变量都可以理解是内存中一个对象“引用”</p><p>当一个引用传递给函数的时候，函数会自动复制一份引用，这个函数里的引用和外边的引用没有半毛关系。所以第一个例子函数把引用指向了一个不可变的对象，当函数返回的时候，外面的引用没半毛感觉，而第二个例子就不一样了，函数内的引用指向的是可变对象，对它的操作和定位指针地址一样，在内存里进行修改。</p><h2 id="staticmethod和-classmethod" tabindex="-1"><a class="header-anchor" href="#staticmethod和-classmethod" aria-hidden="true">#</a> @staticmethod和@classmethod</h2><p>Python 其实有3个方法</p><ul><li>静态方法（staticmethod)</li><li>类方法（classmethod）</li><li>实例方法</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;executing foo(%s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;executing foo(%s,%s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token decorator annotation punctuation">@classmethod</span>\n    <span class="token keyword">def</span> <span class="token function">class_foo</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;executing class_foo(%s,%s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token decorator annotation punctuation">@staticmethod</span>\n    <span class="token keyword">def</span> <span class="token function">static_foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;executing static_foo(%s)&quot;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span>\n\n\na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>这里我们先理解下函数里面的self和cls.这个self和cls是对类或者实例的绑定，对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常见的，它的工作跟任何东西(类，实例)无关，对于实例方法，我们知道在类里每次定义方法的时候都需要绑定这个实例，就是foo(self,x)，因为实例方法的调用离不开实例，我们需要把实例自己传给函数，调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a,x)</code>)。类方法一样，只不过它传递的是类而不是实例，A.class_foo(x)。注意这里self和cls可以替代别的参数，但是python的约定是这俩</p><p>对于静态方法其实和普通方法一样，不需要对谁进行绑定，唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用</p></blockquote><table><thead><tr><th>\\</th><th>实例方法</th><th>类方法</th><th>静态方法</th></tr></thead><tbody><tr><td>a = A()</td><td>a.foo(x)</td><td>a.class_foo(x)</td><td>a.static_foo(x)</td></tr><tr><td>A</td><td>不可用</td><td>A.class_foo(x)</td><td>A.static_foo(x)</td></tr></tbody></table><h2 id="类变量和实例变量" tabindex="-1"><a class="header-anchor" href="#类变量和实例变量" aria-hidden="true">#</a> 类变量和实例变量</h2><p><strong>类变量：</strong></p><blockquote><p>是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）</p></blockquote><p><strong>实例变量：</strong></p><blockquote><p>实例化之后，每个实例单独拥有的变量</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    num_of_instance <span class="token operator">=</span> <span class="token number">0</span>\n\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name\n        Test<span class="token punctuation">.</span>num_of_instance <span class="token operator">+=</span> <span class="token number">1</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>num_of_instance<span class="token punctuation">)</span>\t<span class="token comment"># 0</span>\n    t1 <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>num_of_instance<span class="token punctuation">)</span>\t<span class="token comment"># 1</span>\n    t2 <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token string">&#39;lucy&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t1<span class="token punctuation">.</span>num_of_instance<span class="token punctuation">)</span>\t<span class="token comment"># jack 2</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>num_of_instance<span class="token punctuation">)</span>\t<span class="token comment"># lucy 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>补充例子：</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>\n    name <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>\n\n\np1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>\np2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>\np1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;bbb&quot;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># bbb</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># aaa</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># aaa</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里<code>p1.name = &quot;bbb&quot;</code> 是实例调用了类变量，这其实和上面第一个问题一样，就是函数传参的问题，<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是实例的作用与里面把类变量的引用改变了，就变成了一个实例变量，self.name不再引用Person的类变量name了</p><p>例子：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>\n    name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n\np1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>\np2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>\np1<span class="token punctuation">.</span>name<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># [1]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># [1]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\t<span class="token comment"># [1]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="python自省" tabindex="-1"><a class="header-anchor" href="#python自省" aria-hidden="true">#</a> Python自省</h2><p>自省就是面向对象的语言所写的程序在运行时，所能知道对象的类型。简单一句就是运行时能够获得对象的类型，比如type(),dir(),getattr(),hasattr(),isintance()</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\nb <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>\nc <span class="token operator">=</span> <span class="token boolean">True</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\t<span class="token comment"># &lt;class &#39;list&#39;&gt; &lt;class &#39;dict&#39;&gt; &lt;class &#39;bool&#39;&gt;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\t<span class="token comment"># True</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="字典推倒式" tabindex="-1"><a class="header-anchor" href="#字典推倒式" aria-hidden="true">#</a> 字典推倒式</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> iterable<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>举个例子：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment"># {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="python中单下划线和双下划线" tabindex="-1"><a class="header-anchor" href="#python中单下划线和双下划线" aria-hidden="true">#</a> Python中单下划线和双下划线</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        self<span class="token punctuation">.</span>__superprivate <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span>\n        self<span class="token punctuation">.</span>__superprivate <span class="token operator">=</span> <span class="token string">&quot;,World&quot;</span>\n\n\nmc <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__superprivate<span class="token punctuation">)</span>\t<span class="token comment"># AttributeError: &#39;MyClass&#39; object has no attribute &#39;__superprivate&#39;</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>\t<span class="token comment"># {&#39;_MyClass__superprivate&#39;: &#39;,World&#39;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>__foo__</code>:一种约定，Python内部的名字，用来区别其他用户自定义的命名，以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特使方法</p><p><code>_foo</code>:一种约定，用来指定变量私有，来指定私有变量一种方式，不能用from module import * 导入，其他方面和公有一样访问</p><p><code>__foo</code>:这个有真正的意义：解释器用<code>_classname__foo</code>来代替这个名字，以区别和其他类相同的命名，它无法直接像共有成员一样随便访问，通过对象名._类名__xxx这样的方式可以访问。</p><h2 id="字符串格式化-和-format" tabindex="-1"><a class="header-anchor" href="#字符串格式化-和-format" aria-hidden="true">#</a> 字符串格式化：%和.format</h2><p>.format在许多方面看起来更便利。对于<code>%</code>最烦人的是它无法同时传递一个变量和元祖:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token string">&quot;hi there %s&quot;</span> <span class="token operator">%</span> name\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但是，如果name恰好是(1,2,3)，他将会抛出一个TypeError异常。为了保证它总是正确的，你必须这样做：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token string">&quot;hi there %s&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token punctuation">)</span>   <span class="token comment"># 提供一个单元素的数组而不是一个参数</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但是有点丑..format就没有这些问题，你给的第二个问题也是这样，.format好看多了</p><h2 id="迭代器和生成器" tabindex="-1"><a class="header-anchor" href="#迭代器和生成器" aria-hidden="true">#</a> 迭代器和生成器</h2><p>将列表生成器中[]改成()之后数据结构是否改变？</p><p>答案：是，从列表变成生成器</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>L <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>\t<span class="token comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n\ng <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>\t<span class="token comment"># &lt;generator object &lt;genexpr&gt; at 0x100725c10&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过列表生成式，可以直接创建一个列表。但是，受内存限制，列表容量肯定有限的。而且，创建一个百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费。因此，没有必要创建完整的列表。在python中个，我们可以采用生成器：边循环，边计算的机制。</p><h2 id="args-and-kwargs" tabindex="-1"><a class="header-anchor" href="#args-and-kwargs" aria-hidden="true">#</a> *args and **kwargs</h2><p>用<code>*args</code>和<code>**kwargs</code>只是为了方便并没有强制使用它们</p><p>当你不确定你的函数将要传递多少参数时你可以用<code>*args</code>。例如，它可以传递任意数量的参数</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">print_everything</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> count<span class="token punctuation">,</span> thing <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0}. {1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> thing<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\nprint_everything<span class="token punctuation">(</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cabbage&#39;</span><span class="token punctuation">)</span>\n\n<span class="token number">0</span><span class="token punctuation">.</span> apple\n<span class="token number">1</span><span class="token punctuation">.</span> banana\n<span class="token number">2</span><span class="token punctuation">.</span> cabbage\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>相似的，<code>**kwargs</code>允许你使用没有实现定义的参数名：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">table_things</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} = {1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\ntable_things<span class="token punctuation">(</span>apple<span class="token operator">=</span><span class="token string">&#39;fruit&#39;</span><span class="token punctuation">,</span> cabbage<span class="token operator">=</span><span class="token string">&#39;vegetable&#39;</span><span class="token punctuation">)</span>\ncabbage <span class="token operator">=</span> vegetable\napple <span class="token operator">=</span> fruit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>你可以混用，命名参数首先获得参数值所有的其他参数都传递给<code>*args</code>和<code>**kwargs</code>。命名参数在列表的最前端。例如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">table_things</span><span class="token punctuation">(</span>titlestring<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中，但是<code>*args</code>必须在<code>**kwargs</code>前面。</p><p>当调用函数时也可以用<code>*</code>和<code>**</code>用法，例如：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">print_three_things</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a = {0},b={1},c={2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aardvark&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baboon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">]</span>\nprint_three_things<span class="token punctuation">(</span><span class="token operator">*</span>mylist<span class="token punctuation">)</span>\na <span class="token operator">=</span> aardvark<span class="token punctuation">,</span> b <span class="token operator">=</span> baboon<span class="token punctuation">,</span> c <span class="token operator">=</span> cat\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>就像你看到的一样，它可以传递列表(或者元祖)的每一项并把它们解包，注意必须与它们在函数里的参数相吻合，当然，你可以在函数中定义或者调用时用.*</p><h2 id="python中重载" tabindex="-1"><a class="header-anchor" href="#python中重载" aria-hidden="true">#</a> Python中重载</h2><p>函数重载主要是为了解决两个问题。</p><ul><li>可变参数类型</li><li>可变参数个数</li></ul><p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p><h2 id="new-和-init-的区别" tabindex="-1"><a class="header-anchor" href="#new-和-init-的区别" aria-hidden="true">#</a> <code>__new__</code>和<code>__init__</code>的区别</h2><ul><li><code>__new__</code>是一个静态方法，而<code>__init__</code>是一个实例方法</li><li><code>__new__</code>方法会返回一个创建的实例，而<code>__init__</code>什么都不返回</li><li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用</li><li>当创建一个新实例时调用<code>__new__</code>，初始化一个实例时用<code>__init__</code></li></ul><h2 id="单例子模式" tabindex="-1"><a class="header-anchor" href="#单例子模式" aria-hidden="true">#</a> 单例子模式</h2><blockquote><p>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通常单例模式可以保证系统中一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案，</p><p><code>__new__()</code>在<code>__init__()</code>之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例</p></blockquote><p>1、使用<code>__new__</code>方法</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">&#39;_instance&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            orig <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span> cls<span class="token punctuation">)</span>\n            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> orig<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance\n\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>2、共享属性</p><p>创建实例时把所有实例<code>__dict__</code>指向同一个字典，这样它们具有相同的属性和方法。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Borg</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    _state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        ob <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Borg<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>\n        ob<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> cls<span class="token punctuation">.</span>_state\n        <span class="token keyword">return</span> ob\n\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass2</span><span class="token punctuation">(</span>Borg<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    a <span class="token operator">=</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>3、装饰器版本</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">def</span> <span class="token function">getinstance</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>\n            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>\n\n\n<span class="token decorator annotation punctuation">@singleton</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>\n  \t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>4、import方法</p><p>作为python的模块是天然的单例模块</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">My_Singleton</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\nmy_singleton <span class="token operator">=</span> My_Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">from</span> mysingleton <span class="token keyword">import</span> my_singleton\n\nmy_singleton<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="python中的做用域" tabindex="-1"><a class="header-anchor" href="#python中的做用域" aria-hidden="true">#</a> Python中的做用域</h2><p>Python中，一个变量的作用域是由在代码中被赋值的地方所决定的</p><p>当Python遇到一个变量的话他会按照这样的顺讯进行搜索：</p><p>本地作用域-&gt;当前作用域被嵌入的本地作用域-&gt;全局/模块作用域-&gt;内置作用域</p><h2 id="gil线程的全局锁" tabindex="-1"><a class="header-anchor" href="#gil线程的全局锁" aria-hidden="true">#</a> GIL线程的全局锁</h2><p>线程全局锁为了保证线程安全而采取的独立线程运行的限制，说白了就是一个核只能在同一时间运行一个线程，对于io密集型的任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</p><p>解决办法就是多进程和下面的协程（协程也只能单CPU，但是能减少切换代价提升性能）</p><h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h2><p>简单点说协程是进程和线程的升级版，进程和线程都面临着内核态和用户态切换问题而消耗许多切换时间，而协程就是用户控制切换的时机，不需要陷入系统的内核态。</p><p>Python里最常见的yield就是协程的思想。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包是函数时变成的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p><p>当一个内嵌函数引用其外部作用域的变量，我们就会得到一个闭包，创建一个闭包必须满足以下几点：</p><ul><li>必须有一个内嵌函数</li><li>内嵌函数必须引用外部函数中的变量</li><li>外部函数的返回值必须是内嵌函数</li></ul><h2 id="python里的拷贝" tabindex="-1"><a class="header-anchor" href="#python里的拷贝" aria-hidden="true">#</a> Python里的拷贝</h2><p>引用copy(),deepcopy()的区别</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> copy\n\na <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 原始对象</span>\n\nb <span class="token operator">=</span> a  <span class="token comment"># 赋值，传对象的引用</span>\nc <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 对象拷贝，浅拷贝</span>\nd <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 对象拷贝，深拷贝</span>\n\na<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 修改对象a</span>\na<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 修改对象a中的[&#39;a&#39;,&#39;b&#39;] 数组对象</span>\n\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;a = &#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment"># a =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;b = &#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment"># b =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], 5]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;c = &#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment"># c =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;d = &#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token comment"># d =  [1, 2, 3, 4, [&#39;a&#39;, &#39;b&#39;]]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="python垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#python垃圾回收机制" aria-hidden="true">#</a> Python垃圾回收机制</h2><p>Python GC主要使用引用计数来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清楚”解决容器对象可能产生的循环引用问题，通过“分代回收”以空间换时间的方法提高垃圾回收效率。</p><h2 id="python中list的实现" tabindex="-1"><a class="header-anchor" href="#python中list的实现" aria-hidden="true">#</a> Python中list的实现</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\nL<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\nL<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\nL<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3]</span>\n<span class="token keyword">for</span> e <span class="token keyword">in</span> L<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token comment"># 1</span>\n<span class="token comment"># 2</span>\n<span class="token comment"># 3   </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以看到，list是迭代的</p><h2 id="python的is" tabindex="-1"><a class="header-anchor" href="#python的is" aria-hidden="true">#</a> Python的is</h2><p>is是对比地址，==是对比值</p><h2 id="read-readline和readlines" tabindex="-1"><a class="header-anchor" href="#read-readline和readlines" aria-hidden="true">#</a> read，readline和readlines</h2><ul><li>read 读取整个文件</li><li>readline 读取下一行，使用生成器的方法</li><li>readlines 读取整个文件到一个迭代器以供我们遍历</li></ul>',103),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);