"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[687],{403:(l,e,i)=>{i.r(e),i.d(e,{data:()=>a});const a={key:"v-742c39a2",path:"/Back-end/MySQL%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0.html",title:"MySQL进阶学习",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"表的连接查询方式有哪些，有什么区别？",slug:"表的连接查询方式有哪些-有什么区别",children:[]},{level:2,title:"SQL 的 select语句完整的执行顺序",slug:"sql-的-select语句完整的执行顺序",children:[]},{level:2,title:"说一下Mysql数据库存储的原理?",slug:"说一下mysql数据库存储的原理",children:[]},{level:2,title:"事务的特性?",slug:"事务的特性",children:[]},{level:2,title:"数据库索引",slug:"数据库索引",children:[]},{level:2,title:"数据库怎么优化查询效率?",slug:"数据库怎么优化查询效率",children:[]},{level:2,title:"你用的Mysql是哪个引擎，各引擎之间有什么区别?",slug:"你用的mysql是哪个引擎-各引擎之间有什么区别",children:[]},{level:2,title:"提取数据库中倒数10条数据?",slug:"提取数据库中倒数10条数据",children:[]},{level:2,title:"请写出truncate和delete, drop表数据的差别?",slug:"请写出truncate和delete-drop表数据的差别",children:[]}],filePathRelative:"Back-end/MySQL进阶学习.md",git:{updatedTime:null,contributors:[]}}},6328:(l,e,i)=>{i.r(e),i.d(e,{default:()=>n});const a=(0,i(6252).uE)('<h1 id="mysql进阶学习" tabindex="-1"><a class="header-anchor" href="#mysql进阶学习" aria-hidden="true">#</a> MySQL进阶学习</h1><h2 id="表的连接查询方式有哪些-有什么区别" tabindex="-1"><a class="header-anchor" href="#表的连接查询方式有哪些-有什么区别" aria-hidden="true">#</a> 表的连接查询方式有哪些，有什么区别？</h2><ul><li>inner join（内连接） <ul><li>在两张表进行连接查询时，只保留两张表中完全匹配的结果集</li></ul></li><li>left join（左连接） <ul><li>在两张表进行连接查询时，会返回左表所有的行，即使在右表中没有匹配的记录</li></ul></li><li>right join（右链接） <ul><li>在两张表进行连接查询时，会返回右表所有的行，即使在左表中没有匹配的记录</li></ul></li><li>full join（全链接） <ul><li>在两张表进行连接查询时，返回左表和右表中所有没有匹配的行</li></ul></li></ul><h2 id="sql-的-select语句完整的执行顺序" tabindex="-1"><a class="header-anchor" href="#sql-的-select语句完整的执行顺序" aria-hidden="true">#</a> SQL 的 select语句完整的执行顺序</h2><ul><li>from子句组装起来自不同数据源的数据</li><li>where子句基于指定的条件对记录进行筛选</li><li>group by 子句将数据划分为多个组</li><li>使用聚合函数进行计算</li><li>使用having 子句筛选分组</li><li>select 计算所有的表达式</li><li>使用order by 对结果进行排序</li></ul><h2 id="说一下mysql数据库存储的原理" tabindex="-1"><a class="header-anchor" href="#说一下mysql数据库存储的原理" aria-hidden="true">#</a> 说一下Mysql数据库存储的原理?</h2><blockquote><p>存储过程是一个可编程的函数，它在数据库中创建并保存。它可以有SQL语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的函数，或者封装特定功能时，存储过程非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟</p></blockquote><h2 id="事务的特性" tabindex="-1"><a class="header-anchor" href="#事务的特性" aria-hidden="true">#</a> 事务的特性?</h2><ul><li>原子性</li></ul><blockquote><p>所有操作要么全部成功，要么全部失败回滚</p></blockquote><ul><li>一致性</li></ul><blockquote><p>数据库从一个一致性状态变换到另一个一致性状态，也就是说事务执行之前和执行之后必须都处于一致性状态</p></blockquote><ul><li>隔离性</li></ul><blockquote><p>当多个用户并发访问数据库时，比如操作同一张表，数据库为每一个用户开启的事务，不被其它食物的操作干扰，多个事务之间要相互隔离</p></blockquote><ul><li><p>持久性</p></li><li><blockquote><p>事务一旦提交了，那么对数据库中的数据的改变就是永久性的，即使在数据库系统遇到故障的情况下也不会丢失提交事务的操作</p></blockquote><ul><li><p>脏读</p></li><li><blockquote><p>一个事务处理过程里读取了另一个未提交的事务中的数据</p></blockquote></li><li><p>不可重复读</p></li><li><blockquote><p>对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于查询间隔，被另一个事务修改并提交了</p></blockquote></li><li><p>虚读（幻读）</p></li><li><blockquote><p>事务A按照一定条件进行数据读取，期间事务B插入了相同的搜索条件的新数据，事务A再次按照原先条件进行读取时，发现事务B新插入的数据，称幻读</p></blockquote></li></ul></li></ul><h2 id="数据库索引" tabindex="-1"><a class="header-anchor" href="#数据库索引" aria-hidden="true">#</a> 数据库索引</h2><ul><li>聚集索引（主键索引）：在数据库里面，所有的行树都会按照主键索引进行排序</li><li>非聚集索引：就是给普通字段加上索引</li><li>联合索引：就是好几个字段组成的索引，称为联合索引</li></ul><h2 id="数据库怎么优化查询效率" tabindex="-1"><a class="header-anchor" href="#数据库怎么优化查询效率" aria-hidden="true">#</a> 数据库怎么优化查询效率?</h2><ul><li><p>数据库设计方面</p><ul><li>在一些数字列上设置索引：应避免进行全表扫描，首先应考虑在涉及where或者 order by的列上设置索引</li><li>避免对where子句中数组进行null值判断：否则将导致搜索引擎放弃索引搜索而使用全表搜索</li><li>建立合适的索引</li><li>考虑索引的个数：索引并不是越多越好，索引固然可以提高相应的select的效率，但同时降低了insert及update的效率，因为insert或update时有可能会重建索引，所以怎样建索引需要慎重考虑</li><li>尽量使用数字型字段</li></ul></li><li><p>SQL方面</p><ul><li>应尽量避免where子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在where子句中使用<code>or</code>来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</li><li>in 和 not in 也要慎用，否则会导致全表扫描</li><li>对于连续的数组，能用 between 就不要用 in 了</li></ul></li><li><p>硬件调整性能</p></li><li><blockquote><p>扩大虚拟内存，并保证有足够的扩充的空间；把数据库服务器上的不必要服务关闭掉；把数据库服务器和主域服务器分开；把SQL数据库服务器的吞吐量调为最大；在具有一个以上处理器的机器上运行SQL</p></blockquote></li><li><p>调整数据库</p></li><li><blockquote><p>若对该表查询频率比较高，则建立索引；建立索引时，想尽对该表的所有查询搜索操作。</p></blockquote></li><li><p>使用存储过程</p></li><li><blockquote><p>应用程序的实现过程中，能够采用存储过程实现的对数据库的操作尽量通过存储过程来实现，因为存储过程时存放在数据库服务器上的一次性被设计、编码、测试，并被再次使用</p></blockquote></li><li><p>应用程序结构算法</p></li><li><blockquote><p>建立插叙你条件索引仅仅是提高速度的前提条件，响应速度的提高还依赖于索引的使用</p></blockquote></li></ul><h2 id="你用的mysql是哪个引擎-各引擎之间有什么区别" tabindex="-1"><a class="header-anchor" href="#你用的mysql是哪个引擎-各引擎之间有什么区别" aria-hidden="true">#</a> 你用的Mysql是哪个引擎，各引擎之间有什么区别?</h2><ul><li>MyISAM引擎 <ul><li>不支持事务，不可以回滚还原</li><li>适合查询以及插入为主的应用</li><li>不支持外键</li><li>清空整个表时，则会重建表</li><li>不支持行锁</li></ul></li><li>InnoDB引擎 <ul><li>支持事务，可以回滚还原</li><li>InnoDB适合频繁修改及涉及到安全性较高的应用</li><li>支持外键</li><li>清空整个表时，一行一行的删除</li><li>支持行锁</li></ul></li></ul><h2 id="提取数据库中倒数10条数据" tabindex="-1"><a class="header-anchor" href="#提取数据库中倒数10条数据" aria-hidden="true">#</a> 提取数据库中倒数10条数据?</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="请写出truncate和delete-drop表数据的差别" tabindex="-1"><a class="header-anchor" href="#请写出truncate和delete-drop表数据的差别" aria-hidden="true">#</a> 请写出truncate和delete, drop表数据的差别?</h2><ul><li>truncate # 只删除数据</li><li>delete # 只删除数据</li><li>drop # 删除整个表(结构和数据)</li></ul><p>速度上：drop&gt;truncate&gt;delete</p>',26),t={},n=(0,i(3744).Z)(t,[["render",function(l,e){return a}]])}}]);